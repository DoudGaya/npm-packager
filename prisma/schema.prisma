// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PackageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubscriptionPlan {
  FREE
  PRO
  TEAM
}

enum SubscriptionStatus {
  active
  inactive
  past_due
  canceled
}

enum TransactionStatus {
  pending
  completed
  failed
}

enum TransactionType {
  CREDIT_PURCHASE
  SUBSCRIPTION
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?   @db.Text
  accounts      Account[]
  sessions      Session[]
  packages      Package[]
  apiUsage      ApiUsage[]
  apiKeys       ApiKey[]
  wallet        Wallet?
  transactions  Transaction[]
  feedback      Feedback[]
  aiUsages      AIUsage[]
  
  // Connected accounts
  npmToken      String?
  githubToken   String?
  
  // Subscription
  subscriptionPlan      SubscriptionPlan @default(FREE)
  subscriptionStatus    SubscriptionStatus @default(active)
  subscriptionId        String?
  subscriptionPeriodEnd DateTime?
  
  // 2FA
  twoFactorEnabled      Boolean @default(false)
  twoFactorSecret       String?
  twoFactorBackupCodes  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Package {
  id              String           @id @default(cuid())
  name            String @unique
  description     String
  framework       String
  aiModel         String
  code            String           @db.Text
  documentation   String           @db.Text
  packageStructure String?         @db.Text
  status          PackageStatus    @default(DRAFT)
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions        PackageVersion[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
}

model PackageVersion {
  id              String    @id @default(cuid())
  version         String
  code            String    @db.Text
  documentation   String    @db.Text
  packageStructure String?  @db.Text
  packageId       String
  package         Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())

  @@index([packageId])
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  model       String
  tokens      Int
  cost        Float
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  createdAt   DateTime @default(now())
  lastUsed    DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String   @unique
  credits     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  credits     Int
  status      TransactionStatus
  type        TransactionType
  paymentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPricing {
  id          String   @id @default(cuid())
  plan        SubscriptionPlan
  price       Float
  stripePriceId String?
  paypalPlanId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feedback {
  id          String   @id @default(cuid())
  userId      String
  content     String   @db.Text
  rating      Int
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// AI Usage tracking
model AIUsage {
  id        String   @id @default(cuid())
  userId    String
  model     String
  prompt    String   @db.Text
  tokensUsed Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([model])
  @@index([createdAt])
}





















// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   USER
//   ADMIN
// }

// enum PackageStatus {
//   DRAFT
//   PUBLISHED
//   ARCHIVED
// }

// enum SubscriptionPlan {
//   FREE
//   PRO
//   TEAM
// }

// enum SubscriptionStatus {
//   active
//   inactive
//   past_due
//   canceled
// }

// enum TransactionStatus {
//   pending
//   completed
//   failed
// }

// enum TransactionType {
//   CREDIT_PURCHASE
//   SUBSCRIPTION
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   password      String?
//   role          Role      @default(USER)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt

//   accounts      Account[]
//   sessions      Session[]
//   packages      Package[]
//   apiUsage      ApiUsage[]
//   bio           String?   @db.Text
//   apiKeys       ApiKey[]
//   wallet        Wallet?
//   transactions  Transaction[]
//   feedback      Feedback[]
  
//   // Connected accounts
//   npmToken      String?
//   githubToken   String?
  
//   // Subscription
//   subscriptionPlan      SubscriptionPlan @default(FREE)
//   subscriptionStatus    SubscriptionStatus @default(active)
//   subscriptionId        String?
//   subscriptionPeriodEnd DateTime?
  
//   // 2FA
//   twoFactorEnabled      Boolean @default(false)
//   twoFactorSecret       String?
//   twoFactorBackupCodes  String?
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Package {
//   id          String        @id @default(cuid())
//   name        String        @unique
//   description String
//   userId      String
//   status      PackageStatus @default(DRAFT)
//   framework   String
//   aiModel     String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
  
//   // Package details
//   version     String        @default("0.1.0")
//   repository  String?
//   npmUrl      String?
  
//   // Content
//   code        String        @db.Text
//   documentation String       @db.Text
  
//   // Relations
//   user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
//   versions    PackageVersion[]
// }

// model PackageVersion {
//   id          String   @id @default(cuid())
//   packageId   String
//   version     String
//   code        String   @db.Text
//   documentation String  @db.Text
//   createdAt   DateTime @default(now())
  
//   package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
//   @@unique([packageId, version])
// }

// model ApiUsage {
//   id          String   @id @default(cuid())
//   userId      String
//   model       String
//   tokens      Int
//   cost        Float
//   createdAt   DateTime @default(now())
  
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model ApiKey {
//   id          String   @id @default(cuid())
//   userId      String
//   name        String
//   key         String   @unique
//   createdAt   DateTime @default(now())
//   lastUsed    DateTime?
  
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Wallet {
//   id          String   @id @default(cuid())
//   userId      String   @unique
//   credits     Int      @default(0)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Transaction {
//   id          String   @id @default(cuid())
//   userId      String
//   amount      Float
//   credits     Int
//   status      TransactionStatus
//   type        TransactionType
//   paymentId   String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model SubscriptionPricing {
//   id          String   @id @default(cuid())
//   plan        SubscriptionPlan
//   price       Float
//   stripePriceId String?
//   paypalPlanId String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model Feedback {
//   id          String   @id @default(cuid())
//   userId      String
//   content     String   @db.Text
//   rating      Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Contact {
//   id        String    @id @default(cuid())
//   name      String
//   email     String
//   subject   String
//   message   String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }
